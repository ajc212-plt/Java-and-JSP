<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">

														<!-- polymorphism -->
	<!-- <bean id="tv" class="polymophism.SamsungTV" p:speaker-ref="sony" p:price="2700000"/>
	
	
	<bean id="sony" class="polymophism.SonySpeaker"></bean>
	
	<bean id="apple" class="polymophism.AppleSpeaker"></bean> -->
	
	<!-- <bean id="tv" class="polymophism.SamsungTV" init-method="initMethod" destroy-method="destroyMethod" /> -->
	<!-- <bean id="tv" class="polymophism.SamsungTV" lazy-init="true" /> getBean() 호출할때만 실행 -->
	<!-- <bean id="tv" class="polymophism.SamsungTV" scope="singleton" /> 해당 bean 이 스프링 컨테이너에 의해 단 하나만 생성되어 운용되도록 한다. -->
	 														<!-- end -->
	 													
	 													<!-- Collection -->						
	<!-- <bean id="collectionBean" class="Collection.CollectionBean">
		<property name="addressList">
			<list>
				<value>서울시 강남구 역삼동</value>
				<value>서울시 성동구 행당동</value>
				<value>서울시 성동구 행당동</value>
			</list>
			<map>
				<entry>
					<key><value>고길동</value></key>
					<value>서울시 강남구 역삼동</value>
				</entry>
				<entry>
					<key><value>마이콜</value></key>
					<value>서울시 강서구 화곡동</value>
				</entry>
			</map>
		</property>
	</bean> -->
															<!-- end -->
															
															<!-- annotation -->
<!-- <context:component-scan base-package="polymorphim"></context:component-scan>	
<bean id="tv" class="polymorphism.LGTV">
	<property name="speaker" ref="apple"></property>
	<property name="price" value="27000000"></property>
</bean>

									
	<bean id="sony" class="polymorphism.SonySpeaker"></bean>
	<bean id="apple" class="polymorphism.AppleSpeaker"></bean>
	<bean class="polymorphism.SonySpeaker"></bean> -->
															<!-- end -->
															
															<!-- Board -->
	<!-- <context:component-scan base-package="Board">
	</context:component-scan> -->
															<!-- end -->
															
															<!-- UserService -->
	<!-- <context:component-scan base-package="UserService"/> -->
	<!-- <context:component-scan base-package="Board"/> -->
	
	<!-- <bean id="userService" class="UserService.UserServiceImpl">
		<property name="userDAO" ref="userDAO"/>
	</bean>
	
	<bean id="userDAO" class="UserService.UserDAO"/> -->			
	
	
															<!-- AOP -->
	<!-- <context:component-scan base-package="Board"/>
	
	<bean id="log" class="common.Log4jAdvice"></bean>
	<aop:config>
		<aop:pointcut id="allPointcut" expression="execution(* Board..*Impl.*(..))"/> 
		allPointcut은 리턴타입과 매개변수를 무시하고 Board패키지로 시작하는 클래스 중에서 이름이 Impl로 끝나는 클래스의 모든 메소드를 포인트컷으로 설정
		<aop:pointcut id="getPointcut" expression="execution(* Board..*Impl.get*(..))"/>
		getPointcut은 allPointcut과 같지만 get으로 시작하는 메소드만 포인트컷으로 설정
		
		<aop:aspect ref="log">
			<aop:before pointcut-ref="getPointcut" method="printLogging"/>
		</aop:aspect>
	</aop:config> -->
	
														
	<context:component-scan base-package="Board"/>
	
	<bean id="around" class="common.AroundAdvice"/>
	

	<aop:config>
		<aop:pointcut id="allPointcut" expression="execution(* Board..*Impl.*(..))"/>
		
		<aop:aspect ref="around">
			<aop:around pointcut-ref="allPointcut" method="aroundLog"/>
		</aop:aspect>
		
		
	</aop:config>
												
		
													
</beans>
